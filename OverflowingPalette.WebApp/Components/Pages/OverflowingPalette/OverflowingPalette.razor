@page "/overflowing-palette"

@using global::OverflowingPalette.Shared.Models
@using global::OverflowingPalette.WebApp.Components.Pages.OverflowingPalette.Components
@using global::OverflowingPalette.WebApp.Services
@using static global::OverflowingPalette.Shared.Constants.Constants

@inject GameService GameService

<PageTitle>Overflowing Palette</PageTitle>

<main class="row flex-grow-1 p-3 p-md-4">
    <div class="col-12 col-md-2 col-lg-2 mb-4 mb-md-0">
        <div class="card bg-dark-subtle border-secondary h-100">
            <div class="card-header text-white fw-bold">
                Levels
            </div>
            <div class="list-group list-group-flush">
                <NavLink href="/game/1" class="list-group-item list-group-item-action list-group-item-dark">1</NavLink>
                <NavLink href="/game/2" class="list-group-item list-group-item-action list-group-item-dark">2</NavLink>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-8 col-lg-8 d-flex flex-column align-items-center">
        <div class="d-flex justify-content-between align-items-center w-100 mb-3 px-3">
            <h5 class="text-light mb-0">Remaining Moves: <span class="badge bg-warning fs-6 text-dark rounded-pill">@RemainingMoves</span></h5>
            @if (Level is not null && !string.IsNullOrEmpty(Level.TargetColor))
            {
                <h5 class="text-light mb-0">Turn all the blocks into <span class="fw-bold" style="color:@Level.TargetColor">@GetColorName()</span></h5>
            }
        </div>
        <div class="col-12 col-md-8 col-lg-8">
            <div class="col-12">
                @for (int i = 0; i < Level?.Height; i++)
                {
                    <div class="row">
                        @foreach (var square in CurrentBlocks.Skip(i * Level.Width).Take(Level.Width))
                        {
                            <AnimatedSquareComponent Square="@square"
                                                        SelectedColor="@SelectedColor"
                                                        ChangeNeighborsColor="@ChangeNeighborsColor" />
                        }
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-12 col-md-2 col-lg-2 d-flex flex-column align-items-center mt-4 mt-md-0">
        <div class="d-flex flex-md-column gap-3 mb-4">
            @foreach (var color in PaletteColors!)
            {
                <div class="palette-item d-flex align-items-center">
                    <button class="palette-color-button rounded-circle border @IsColorSelected(color)"
                            @onclick="() => ChangeSelectedColor(color)"
                            style="background-color: @color" />

                    @if (string.Equals(SelectedColor, color))
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="white" class="bi bi-caret-left-fill ms-2" viewBox="0 0 16 16">
                            <path d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z" />
                        </svg>
                    }
                </div>
            }
            <div class="mt-md-auto">
                <button type="button" class="btn-reset" title="Restart" @onclick="RestartLevel">
                    <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M19.7285 10.9288C20.4413 13.5978 19.7507 16.5635 17.6569 18.6573C15.1798 21.1344 11.4826 21.6475 8.5 20.1966M18.364 8.05071L17.6569 7.3436C14.5327 4.21941 9.46736 4.21941 6.34316 7.3436C3.42964 10.2571 3.23318 14.8588 5.75376 18M18.364 8.05071H14.1213M18.364 8.05071V3.80807"
                              stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </button>
            </div>
        </div>
    </div>
</main>

@code {
    private const int Width = 10;
    private const int Height = 8;
    private readonly HashSet<(int, int)> Offsets = [(0, 1), (1, 0), (0, -1), (-1, 0)];

    private IEnumerable<string>? PaletteColors = Array.Empty<string>();
    private LevelDetailsDto Level;
    private List<BlockStateDto> CurrentBlocks = new();
    private string? SelectedColor { get; set; }
    private bool IsProceeding = false;
    private int RemainingMoves;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Level = await GameService.GetGameLevel(1);

            CurrentBlocks = Level.InitialState
                .Select(b => new BlockStateDto
                            {
                                PositionX = b.PositionX,
                                PositionY = b.PositionY,
                                Color = b.Color
                            }
                )
                .ToList();

            PaletteColors = Level.Palette.Select(x => x.Color);
            RemainingMoves = Level.MaxMoves;
            SelectedColor = PaletteColors.FirstOrDefault() ?? string.Empty;

            StateHasChanged();
        }
    }

    private async Task ChangeNeighborsColor(BlockStateDto clickedSquare)
    {
        if (IsProceeding)
        {
            return;
        }

        IsProceeding = true;
        RemainingMoves--;

        Dictionary<int, List<(BlockStateDto square, string animationClass)>> animationPlan = new();
        Queue<(BlockStateDto square, int depth, (int offsetX, int offsetY) direction)> queue = new();
        HashSet<(int, int)> visited = new();

        queue.Enqueue((clickedSquare, 0, (0, 0)));
        visited.Add((clickedSquare.PositionX, clickedSquare.PositionY));

        while (queue.Any())
        {
            var (currentSquare, depth, direction) = queue.Dequeue();

            if (!animationPlan.ContainsKey(depth))
            {
                animationPlan[depth] = new();
            }

            animationPlan[depth].Add((currentSquare, GetAnimationClassFromStart(clickedSquare, currentSquare)));

            foreach (var (offsetX, offsetY) in Offsets)
            {
                var newRow = currentSquare.PositionX + offsetX;
                var newCol = currentSquare.PositionY + offsetY;

                if (newRow >= 0 && newRow < Level.Height && newCol >= 0 && newCol < Level.Width &&
                    !visited.Contains((newRow, newCol)))
                {
                    var neighbor = GetSquare(newRow, newCol);

                    if (neighbor is not null
                        && neighbor.Color == clickedSquare.Color)
                    {
                        queue.Enqueue((neighbor, depth + 1, (offsetX, offsetY)));
                        visited.Add((newRow, newCol));
                    }
                }
            }
        }

        foreach (var depthLevel in animationPlan.Keys.OrderBy(key => key))
        {
            foreach (var (square, animationClass) in animationPlan[depthLevel])
            {
                square.PreviousColor = square.Color;
                square.Color = SelectedColor;
                square.AnimationClass = animationClass;
            }

            StateHasChanged();
            await Task.Delay(100);
        }

        CheckForWinCondition();
        CheckRemainingMovesCondition();

        IsProceeding = false;
    }

    private BlockStateDto? GetSquare(int row, int col)
    {
        int index = row * Level.Width + col;
        return index >= 0 && index < CurrentBlocks.Count ? CurrentBlocks[index] : null;
    }

    private void ChangeSelectedColor(string color)
    {
        if (IsProceeding)
        {
            return;
        }

        SelectedColor = color;
    }

    private string IsColorSelected(string color)
    {
        return string.Equals(SelectedColor, color) ? CssClasses.BorderWhite : CssClasses.BorderDark;
    }


    private string GetAnimationClassFromStart(BlockStateDto startSquare, BlockStateDto currentSquare)
    {
        if (startSquare == currentSquare) 
        {
            return string.Empty;
        }

        int totalDifferenceX = currentSquare.PositionX - startSquare.PositionX;
        int totalDifferenceY = currentSquare.PositionY - startSquare.PositionY;

        return (totalDifferenceX, totalDifferenceY) switch
        {
            var (differenceX, differenceY) when Math.Abs(differenceX) > Math.Abs(differenceY) =>
                differenceX > 0 ? AnimationStyles.FromTop : AnimationStyles.FromBottom,

            var (differenceX, differenceY) when Math.Abs(differenceY) > Math.Abs(differenceX) =>
                differenceY > 0 ? AnimationStyles.FromLeft : AnimationStyles.FromRight,

            ( > 0, > 0) => AnimationStyles.FromTopLeft,
            ( < 0, > 0) => AnimationStyles.FromBottomLeft,
            ( > 0, < 0) => AnimationStyles.FromTopRight,
            ( < 0, < 0) => AnimationStyles.FromBottomRight,
            _ => AnimationStyles.None
        };
    }

    private void RestartLevel()
    {
        CurrentBlocks = Level.InitialState
            .Select(b => new BlockStateDto
            {
                PositionX = b.PositionX,
                PositionY = b.PositionY,
                Color = b.Color
            }
            )
            .ToList();
        RemainingMoves = Level.MaxMoves;
    }

    private string GetColorName()
    {
        if (string.IsNullOrEmpty(Level?.TargetColor))
        {
            return string.Empty;
        }

        return Level?.TargetColor switch
        {
            Colors.Red => "Red",
            _ => string.Empty
        };
    }

    private void CheckForWinCondition()
    {
        var allBlocksHaveCorrectColor = CurrentBlocks.All(block => block.Color == Level.TargetColor);

        if (allBlocksHaveCorrectColor)
        {
            RestartLevel();
        }
    }

    private void CheckRemainingMovesCondition()
    {
        if(RemainingMoves <= 0)
        {
            RestartLevel();
        }
    }
}
