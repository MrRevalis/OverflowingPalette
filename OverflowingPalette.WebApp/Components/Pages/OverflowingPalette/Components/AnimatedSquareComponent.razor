@using global::OverflowingPalette.Shared.Models
@using global::OverflowingPalette.WebApp.Handlers

<div 
    class="col border border-primary rounded shadow-sm game-palette @Square.AnimationClass"
    style="background-color: @Square.Color; --newColor: @Square.Color; --previousColor: @Square.PreviousColor;"
    @onclick="(args) => ChangeSquareColorAsync(args)"
    @onanimationend="HandleAnimationEnd" />

@code {
    [Parameter]
    public required BlockStateDto Square { get; set; }

    [Parameter]
    public string? SelectedColor { get; set; }

    [Parameter]
    public EventCallback<BlockStateDto> ChangeNeighborsColor { get; set; }

    public async Task ChangeSquareColorAsync(MouseEventArgs args)
    {
        if (string.IsNullOrEmpty(SelectedColor)
            || string.Equals(Square.Color, SelectedColor))
        {
            return;
        }

        await ChangeNeighborsColor.InvokeAsync(Square);
    }

    private void HandleAnimationEnd()
    {
        Square.AnimationClass = string.Empty;
    }
}
